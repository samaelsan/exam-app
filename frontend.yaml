AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DomainName:
    Type: String
  SubDomain:
    Type: String
  CreateApex:
    Type: String
  HostedZoneId:
    Type: String

Conditions:
  CreateApexConfig:
    Fn::Equals:
      - !Ref CreateApex
      - 'yes'

#Certifacte creation
Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      SubjectAlternativeNames:
        Fn::If:
          - CreateApexConfig
          - [!Ref DomainName]
          - !Ref AWS::NoValue
      DomainValidationOptions:
        - DomainName: !Sub '${SubDomain}.${DomainName}'
          HostedZoneId: !Ref HostedZoneId
        - Fn::If:
            - CreateApexConfig
            - DomainName: !Ref DomainName
              HostedZoneId: !Ref HostedZoneId
            - !Ref AWS::NoValue
      ValidationMethod: DNS

#Bucket log 
  S3BucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

#S3 Bucket for frontend site
  S3BucketRoot:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref 'S3BucketLogs'
        LogFilePrefix: 'origin/'

#Bucket Policy Creation
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketRoot
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: s3:GetObject
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3BucketRoot
                - /*
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
    
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${SubDomain}.${DomainName}'
          - !If [CreateApexConfig, !Ref DomainName, !Ref 'AWS::NoValue']
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
          ViewerProtocolPolicy: 'redirect-to-https'
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/403.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Logging:
          Bucket: !Ref S3BucketLogs
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
          - DomainName: !GetAtt S3BucketRoot.DomainName
            Id: !Sub 'S3-${AWS::StackName}-root'
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'                

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub
          - amzn-secure-static-site-${guid}
          - guid: !Select [2, !Split ['/', !Ref 'AWS::StackId']]
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub '${SubDomain}.${DomainName}'
          Type: 'A'
          AliasTarget:
            DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
            EvaluateTargetHealth: false
            HostedZoneId: 'Z2FDTNDATAQYW2'

  ApexRoute53RecordSetGroup:
    Condition: CreateApexConfig
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref 'DomainName'
          Type: 'A'
          AliasTarget:
            DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
            EvaluateTargetHealth: false
            HostedZoneId: 'Z2FDTNDATAQYW2'

Outputs:
  S3BucketLogs:
    Description: Logging bucket
    Value: !Ref S3BucketLogs
  S3BucketRoot:
    Description: Website bucket
    Value: !Ref S3BucketRoot
  CertificateArn:
    Description: Issued certificate
    Value: !Ref Certificate
  CFDistributionName:
    Description: CloudFront distribution
    Value: !Ref CloudFrontDistribution
